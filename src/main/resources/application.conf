akka {
  
  ## Ask Akka to create any actor threads it needs as "daemon" threads.
  ## This has no impact on functionality or performance, but if this is
  ## not "on", it seems that Akka actor threads are left lingering in the
  ## JVM when the servlet container is asked to stop.  As such, the servlet
  ## container JVM never actually exits.
  daemonic = on
  
  loglevel = INFO
  event-handlers = ["akka.event.slf4j.Slf4jEventHandler"]
  
}

spray.servlet {

  ## The Spray "WebBoot" class (a.k.a., "main").  The root ActorSystem
  ## and any other required child actors for this web-application
  ## are started here.
  boot-class = "com.kolich.spray.Boot"
  
  ## The maximum amount of time spray-servlet will wait for any
  ## service actors to respond to a request.  If the service actors do no
  ## complete the context within this timeframe, Spray will send back a
  ## default "request timeout" 500 error. 
  request-timeout = 30s
  
  ## The full path from the Servlet container root where Spray should handle
  ## requests.  If you package your web-application into foobar.war, then
  ## the resulting "context" is /foobar when the servlet container unpacks
  ## your application.  And so, Spray will handle requests under
  ## /foobar/app* and /foobar/app/*.  Note this is tied closely with
  ## the SprayConnectorServlet's servlet-mapping URL pattern set in your
  ## web.xml.
  root-path = "/spray/app"
  
}

webapp {

  ## The length a web-session can be idle before it's considered timed out.
  session-timeout = 30m
  
  ## The full path to "static" content (like JavaScript, CSS, images, etc.)
  ## that's served by the servlet container's default servlet.  This path
  ## maps to "src/main/webapp/public" in the source tree.
  public-resource-path = "/spray/public"
  
}